
//ABCThis code file contains automations for layout
// let state = 0
// setInterval(() => {
//   for (const id of segments.GetSegmentIds()) {
//     const seg = segments.AccessSegmentById(id)
//       //console.log(`Segment #${id} `)
//       console.log(seg.turnout1.turnoutStates)
//       //console.log(seg.keypad)
//       //seg.ambientlight1.SetLight(5, state)
//       //seg.ambientlight1.SetEffect(0, 2)
//       //console.log(seg.ambientlight1.effects)

//       state = !state
//   }
// }, 1000)

// let state2 = 0
// setInterval(() => {
//   for (const id of segments.GetSegmentIds()) {
//     const seg = segments.AccessSegmentById(id)
//       // const state = {
//       //   bulb_a: state2 ? 3 : 0,
//       //   bulb_b: state2 ? 0 : 2,
//       //   bulb_c: state2 ? 0 : 3,
//       //   bulb_d: state2 ? 3 : 0,
//       // }
//       // seg.signal1.SetSignalPattern(0, state)

//       seg.ambientlight1.ToggleEffect(0)
//   }
//   state2 = !state2
// }, 1500)

//const sarud = segments.AccessSegmentById(5)
// sarud.on('online', () => { console.log('Sarud: ONLINE') })
// sarud.signal.on('uptime', (uptime) => console.log(`Uptime: ${uptime}ms`))
// sarud.signal.on('version', (versioninfo) => console.log(`Version: ${versioninfo}`))
// sarud.signal.on('change', (index, state) => console.log(`${index} changed: ${require('util').inspect(state, false, 0, false)}`))
// sarud.keypad.on('switchchange', (index, state) => console.log(`${index} switch changed: ${require('util').inspect(state, false, 0, false)}`))
// sarud.keypad.on('buttonpress', (index, islong) => console.log(`${index} button pressed: ${islong ? 'long' : 'short'}`))
// sarud.keypad.on('buttonshortpress', (index) => console.log(`${index} button short pressed`))
// sarud.keypad.on('buttonlongpress', (index) => console.log(`${index} button long pressed`))


//sarud.on('event', (...arguments_) => { console.log(arguments_) })

//global.layoutManager.saveToFile()
//global.layout.up

const sg6 = segments.AccessSegmentById(6)
const sg6signal = sg6.signal
const sg6turnout = sg6.turnout
// setInterval(() => {
//   sg6signal.snd(1)
//   sg6turnout.snd(0)
// }, 2000)


const sg10 = segments.AccessSegmentById(10)
const sg10signal = sg10.signal
const sg10ambient = sg10.ambientlight

setInterval(() => {
  //sg10ambient.ToggleNight()
}, 2000)

const sg5 = segments.AccessSegmentById(5)
const sg5key = sg5.keypad
sg5key.on('buttonshortpress', (key) => {
  switch (key) {
    case 0:
      sg10signal.ToggleSignal(0)
      break
  }
})
sg5key.on('buttonlongpress', (key) => {
  switch (key) {
    case 0:
      sg10signal.ToggleSignal(5)
      break
  }
})
sg5key.on('switchchange', (sw, state) => {
  switch (sw) {
    case 4:
      sg10ambient.SetNight(state)
      break
  }
  //  console.log(key)
})
//master.on('version', (version) => console.log(version))
//master.on('uptime', (uptime) => console.log(uptime))

// setInterval(() => {
//   //console.log(master.GetUptimeSec())
//   console.log(sarud.GetModeAsString())
// }, 3 * 1000)

// setInterval(() => {
//   //console.log(master.GetUptimeSec())
//   for (const id of global.segments.GetSegmentIds()) {
//     const sg = global.segments.AccessSegmentById(id)
//     console.log(sg.GetModeAsString())
//   }
// }, 3 * 1000)



// setInterval(() => {
//   console.log('Toggle signal')
//   const sarud = segments.AccessSegmentById(6)
//   sarud.signal.ToggleSignal(5)
// }, 3 * 1000)

// setInterval(() => {
//   console.log('Reset')
//   const sarud = segments.AccessSegmentById(6)
//   sarud.master.Reset()
// }, 10 * 1000)

// setInterval(() => {
//   console.log('PLAY')
//   const sarud = segments.AccessSegmentById(5)
//   sarud.sound.Play(1)
//   setTimeout(() => {
//     console.log('STOP')
//     const sarud = segments.AccessSegmentById(5)
//     sarud.sound.Stop()
//   }, 4 * 1000)
// }, 10 * 1000)
// setTimeout(() => {
//   console.log('STOP')
//   const sarud = segments.AccessSegmentById(5)
//   sarud.sound.Stop()
// }, 12 * 1000)


// setInterval(() => {
//   for (const id of segments.GetSegmentIds()) {
//     const seg = segments.AccessSegmentById(id)
//     console.log(seg.signal1.signalStates[0])
//   }
// }, 10 * 1000)

// setInterval(() => {
//   console.log('Rec: ' + rf24.getStat().receiveCount)
//   console.log('Rec size: ' + rf24.getStat().receiveSize)
//   console.log('Rec/min: ' + rf24.getStat().receiveCountPerMin())
//   console.log('Rec size/min: ' + rf24.getStat().receiveSizePerMin())
// }, 1 * 1000)
